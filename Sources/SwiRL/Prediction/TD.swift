//
//  TD.swift
//  
//
//  Created by Maxim Volgin on 11/08/2020.
//

import Foundation

//public protocol TD {
//    
//    associatedtype A: RLAction1
//    
//    func Q(_ S: RLState1, _ A: A) -> RLValue
//    
//    func targetQ() -> RLValue
//    
//    func target(R‚Çú‚Çä‚ÇÅ: RLValue, …£: RLValue) -> RLValue
//    
//    func error(QS‚ÇúA‚Çú: RLValue, R‚Çú‚Çä‚ÇÅ: RLValue, …£: RLValue) -> RLValue
//    
//    /** @return Q(St, At) */
//    func backup(S‚Çú: RLState1, A‚Çú: A, R‚Çú‚Çä‚ÇÅ: RLValue, …£: RLValue, ùõº‚Çú: RLValue) -> RLValue
//    
//}
//
//public class TDAbstract<A: RLAction1>: TD {
//    
//    public func Q(_ S: RLState1, _ A: A) -> RLValue { 0.0 } // abstract
//    
//    public func targetQ() -> RLValue { 0.0 } // abstract
//    
//    public func target(R‚Çú‚Çä‚ÇÅ: RLValue, …£: RLValue) -> RLValue {
//        R‚Çú‚Çä‚ÇÅ + …£ * targetQ()
//    }
//    
//    public func error(QS‚ÇúA‚Çú: RLValue, R‚Çú‚Çä‚ÇÅ: RLValue, …£: RLValue) -> RLValue {
//        target(R‚Çú‚Çä‚ÇÅ: R‚Çú‚Çä‚ÇÅ, …£: …£) - QS‚ÇúA‚Çú
//    }
//    
//    /** @return Q(St, At) */
//    public func backup(S‚Çú: RLState1, A‚Çú: A, R‚Çú‚Çä‚ÇÅ: RLValue, …£: RLValue, ùõº‚Çú: RLValue) -> RLValue {
//        let QS‚ÇúA‚Çú = Q(S‚Çú, A‚Çú)
//        return QS‚ÇúA‚Çú + ùõº‚Çú * error(QS‚ÇúA‚Çú: QS‚ÇúA‚Çú, R‚Çú‚Çä‚ÇÅ: R‚Çú‚Çä‚ÇÅ, …£: …£)
//    }
//    
//}
//
//public class SARSA1<A: RLAction1>: TDAbstract<A> {
//    
//    public override func targetQ() -> RLValue {
////        Q(S‚Çú‚Çä‚ÇÅ, A‚Çú‚Çä‚ÇÅ)
//        0.0
//    }
//    
//}
//
//public class QLearning1<A: RLAction1>: TDAbstract<A> {
//    
//    public override func targetQ() -> RLValue {
////        max‚ÇêQ(S‚Çú‚Çä‚ÇÅ, a)
//        0.0
//    }
//    
//}
//
//public struct TD1 {
//    /** @return Vt+1(St) */
////    public static func target(R‚Çú‚Çä‚ÇÅ: RLValue, S‚Çú‚Çä‚ÇÅ: RLState1, …£: RLValue = 1.0) -> RLValue {
////        Rt+1 + …£*Vt(St+1)
////        return state.isTerminal ? 0.0 : reward + self.discount * self.value(state: state)
////    }
//    
//    
////    public static func error() -> RLValue {
////        TD.target() - Vt(St)
////    }
//    
//    /** Vt+1(St) */
////    public func backup() -> RLValue {
////        Vt(St) + ùõºt * TD.error()
////    }
//    
//}
