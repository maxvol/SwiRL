//
//  RLValueBasedAlgorithm.swift
//  SwiRL
//
//  Created by Maxim Volgin on 11/10/2020.
//

import Foundation

public protocol RLValueBasedAlgorithm {
    associatedtype ValueFunction: RLValueFunction
    associatedtype Target: RLTarget where Target.Value == ValueFunction.Value
    
    var valueFunction: ValueFunction { get set }
    
    /**
     - Parameters:
        - key: value function key
        - target: target
        - ùõº:  learning rate
     - Returns: new value for value‚Çú
     - Note: value‚Çú + ùõº[target‚Çú - value‚Çú]
     */
    mutating func backup(for key: ValueFunction.Key, with target: Target, learningRate ùõº: Target.Value)
    /**
     - Parameters:
        - value‚Çú: estimated value on step `t`
        - target‚Çú: target
        - ùõº:  learning rate
     - Returns: new value for value‚Çú
     - Note: value‚Çú + ùõº[target‚Çú - value‚Çú]
     */
    func newValue(value value‚Çú: Target.Value, target target‚Çú: Target, learningRate ùõº: Target.Value) -> Target.Value
    /**
     - Parameters:
        - value‚Çú: estimated value on step `t`
        - target‚Çú: target
     - Returns: error
     - Note: target‚Çú - value‚Çú
     */
    func error(value value‚Çú: Target.Value, target target‚Çú: Target) -> Target.Value
}

public extension RLValueBasedAlgorithm {
    
    mutating func backup(for key: ValueFunction.Key, with target: Target, learningRate ùõº: Target.Value) {
        var value = valueFunction[key]
        value = newValue(value: value, target: target, learningRate: ùõº)
        valueFunction[key] = value
    }

    func newValue(value value‚Çú: Target.Value, target target‚Çú: Target, learningRate ùõº: Target.Value) -> Target.Value {
        value‚Çú + ùõº*error(value: value‚Çú, target: target‚Çú)
    }

    func error(value value‚Çú: Target.Value, target target‚Çú: Target) -> Target.Value {
        target‚Çú() - value‚Çú
    }
    
}

public protocol RLStateValueBasedAlgorithm: RLValueBasedAlgorithm where ValueFunction: RLStateValueFunction  {
    mutating func backup(state S‚Çú: ValueFunction.State, with target: Target, learningRate ùõº: Target.Value)
}

public extension RLStateValueBasedAlgorithm {
    mutating func backup(state S‚Çú: ValueFunction.State, with target: Target, learningRate ùõº: Target.Value) {
        var value = valueFunction.V(S‚Çú)
        value = newValue(value: value, target: target, learningRate: ùõº)
        valueFunction[S‚Çú] = value
    }
}

public protocol RLStateActionValueBasedAlgorithm: RLValueBasedAlgorithm where ValueFunction: RLStateActionValueFunction {
    mutating func backup(state S‚Çú: ValueFunction.State, action A‚Çú: ValueFunction.Action, with target: Target, learningRate ùõº: Target.Value)
}

public extension RLStateActionValueBasedAlgorithm {
    mutating func backup(state S‚Çú: ValueFunction.State, action A‚Çú: ValueFunction.Action, with target: Target, learningRate ùõº: Target.Value) {
        var value = valueFunction.Q(S‚Çú, A‚Çú)
        value = newValue(value: value, target: target, learningRate: ùõº)
        valueFunction[S‚Çú, A‚Çú] = value
    }
}
