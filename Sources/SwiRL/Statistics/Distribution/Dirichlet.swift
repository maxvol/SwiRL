//
//  Dirichlet.swift
//  SwiRL
//
//  Created by Maxim Volgin on 08/02/2020.
//

import Foundation

public struct Dirichlet { // : Distribution {
    public let Œ±: [Double]

    public init(_ Œ±: [Double], _ Œ∏: Double...) {
        assert(Œ±.filter { $0 <= 0.0 }.count == 0, "Œ± > 0")
        self.Œ± = Œ±
    }

//    /** ùîº[x] = p */
//    public var mean: Double { get { self.p } }
//
//    /** Mode[x] =  */
//    public var mode: Double { get { 0.0 } } // TODO: implement
//
//    /** Var[x] = p (1 - p)  */
//    public var variance: Double { get { self.p * (1.0 - self.p) } }

    /**
     */
    public func PDF(_ Œ∏: Double...) -> Double {
        assert(Œ∏.count == self.Œ±.count, "x count = \(self.Œ±.count)")
        assert(Œ∏.filter { $0 < 0.0 }.count == 0, "Œ∏ >= 0")
        assert(Œ∏.reduce(0,+) == 1.0, "‚àëŒ∏ = 1")
        let Œ±‚ÇÄ = ‚àëself.Œ±
        let Œ±‚Çä = [Œ±‚ÇÄ] + self.Œ±
        let product: Array<Double> = zip(Œ∏, Œ±‚Çä).map { pair in
                let (x, Œ±) = pair
                return pow(x, Œ±)
            }
        return ( ‚àèproduct ) / Œí(self.Œ±)
    }

}
